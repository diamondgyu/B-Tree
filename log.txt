==1371== Memcheck, a memory error detector
==1371== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==1371== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==1371== Command: ./main
==1371== Parent PID: 960
==1371== 
==1371== Invalid read of size 8
==1371==    at 0x109D89: db_find (bpt.c:173)
==1371==    by 0x10ABDD: db_insert (bpt.c:455)
==1371==    by 0x1093A3: main (main.c:15)
==1371==  Address 0x4a8f080 is 0 bytes after a block of size 4,096 alloc'd
==1371==    at 0x484DA83: calloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==1371==    by 0x10963D: load_page (bpt.c:38)
==1371==    by 0x1097DD: open_table (bpt.c:67)
==1371==    by 0x109355: main (main.c:8)
==1371== 
==1371== Conditional jump or move depends on uninitialised value(s)
==1371==    at 0x109D90: db_find (bpt.c:173)
==1371==    by 0x10ABDD: db_insert (bpt.c:455)
==1371==    by 0x1093A3: main (main.c:15)
==1371== 
==1371== 
==1371== Process terminating with default action of signal 11 (SIGSEGV)
==1371==  Access not within mapped region at address 0x4E8D000
==1371==    at 0x109D89: db_find (bpt.c:173)
==1371==    by 0x10ABDD: db_insert (bpt.c:455)
==1371==    by 0x1093A3: main (main.c:15)
==1371==  If you believe this happened as a result of a stack
==1371==  overflow in your program's main thread (unlikely but
==1371==  possible), you can try to increase the size of the
==1371==  main thread stack using the --main-stacksize= flag.
==1371==  The main thread stack size used in this run was 8388608.
==1371== 
==1371== HEAP SUMMARY:
==1371==     in use at exit: 12,288 bytes in 3 blocks
==1371==   total heap usage: 3 allocs, 0 frees, 12,288 bytes allocated
==1371== 
==1371== LEAK SUMMARY:
==1371==    definitely lost: 0 bytes in 0 blocks
==1371==    indirectly lost: 0 bytes in 0 blocks
==1371==      possibly lost: 0 bytes in 0 blocks
==1371==    still reachable: 12,288 bytes in 3 blocks
==1371==         suppressed: 0 bytes in 0 blocks
==1371== Reachable blocks (those to which a pointer was found) are not shown.
==1371== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==1371== 
==1371== Use --track-origins=yes to see where uninitialised values come from
==1371== For lists of detected and suppressed errors, rerun with: -s
==1371== ERROR SUMMARY: 261625 errors from 2 contexts (suppressed: 0 from 0)
